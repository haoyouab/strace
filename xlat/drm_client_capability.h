/* Generated by ./xlat/gen.sh from ./xlat/drm_client_capability.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(DRM_CLIENT_CAP_STEREO_3D) || (defined(HAVE_DECL_DRM_CLIENT_CAP_STEREO_3D) && HAVE_DECL_DRM_CLIENT_CAP_STEREO_3D)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CLIENT_CAP_STEREO_3D) == (1), "DRM_CLIENT_CAP_STEREO_3D != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CLIENT_CAP_STEREO_3D 1
#endif
#if defined(DRM_CLIENT_CAP_UNIVERSAL_PLANES) || (defined(HAVE_DECL_DRM_CLIENT_CAP_UNIVERSAL_PLANES) && HAVE_DECL_DRM_CLIENT_CAP_UNIVERSAL_PLANES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CLIENT_CAP_UNIVERSAL_PLANES) == (2), "DRM_CLIENT_CAP_UNIVERSAL_PLANES != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CLIENT_CAP_UNIVERSAL_PLANES 2
#endif
#if defined(DRM_CLIENT_CAP_ATOMIC) || (defined(HAVE_DECL_DRM_CLIENT_CAP_ATOMIC) && HAVE_DECL_DRM_CLIENT_CAP_ATOMIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CLIENT_CAP_ATOMIC) == (3), "DRM_CLIENT_CAP_ATOMIC != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CLIENT_CAP_ATOMIC 3
#endif
#if defined(DRM_CLIENT_CAP_ASPECT_RATIO) || (defined(HAVE_DECL_DRM_CLIENT_CAP_ASPECT_RATIO) && HAVE_DECL_DRM_CLIENT_CAP_ASPECT_RATIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CLIENT_CAP_ASPECT_RATIO) == (4), "DRM_CLIENT_CAP_ASPECT_RATIO != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CLIENT_CAP_ASPECT_RATIO 4
#endif
#if defined(DRM_CLIENT_CAP_WRITEBACK_CONNECTORS) || (defined(HAVE_DECL_DRM_CLIENT_CAP_WRITEBACK_CONNECTORS) && HAVE_DECL_DRM_CLIENT_CAP_WRITEBACK_CONNECTORS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CLIENT_CAP_WRITEBACK_CONNECTORS) == (5), "DRM_CLIENT_CAP_WRITEBACK_CONNECTORS != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CLIENT_CAP_WRITEBACK_CONNECTORS 5
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat drm_client_capability in mpers mode

# else

static const struct xlat_data drm_client_capability_xdata[] = {
 XLAT(DRM_CLIENT_CAP_STEREO_3D),
 XLAT(DRM_CLIENT_CAP_UNIVERSAL_PLANES),
 XLAT(DRM_CLIENT_CAP_ATOMIC),
 XLAT(DRM_CLIENT_CAP_ASPECT_RATIO),
 XLAT(DRM_CLIENT_CAP_WRITEBACK_CONNECTORS),
};
static
const struct xlat drm_client_capability[1] = { {
 .data = drm_client_capability_xdata,
 .size = ARRAY_SIZE(drm_client_capability_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
