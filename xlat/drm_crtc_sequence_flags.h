/* Generated by ./xlat/gen.sh from ./xlat/drm_crtc_sequence_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(DRM_CRTC_SEQUENCE_RELATIVE) || (defined(HAVE_DECL_DRM_CRTC_SEQUENCE_RELATIVE) && HAVE_DECL_DRM_CRTC_SEQUENCE_RELATIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CRTC_SEQUENCE_RELATIVE) == (0x00000001), "DRM_CRTC_SEQUENCE_RELATIVE != 0x00000001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CRTC_SEQUENCE_RELATIVE 0x00000001
#endif
#if defined(DRM_CRTC_SEQUENCE_NEXT_ON_MISS) || (defined(HAVE_DECL_DRM_CRTC_SEQUENCE_NEXT_ON_MISS) && HAVE_DECL_DRM_CRTC_SEQUENCE_NEXT_ON_MISS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_CRTC_SEQUENCE_NEXT_ON_MISS) == (0x00000002), "DRM_CRTC_SEQUENCE_NEXT_ON_MISS != 0x00000002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_CRTC_SEQUENCE_NEXT_ON_MISS 0x00000002
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat drm_crtc_sequence_flags in mpers mode

# else

static const struct xlat_data drm_crtc_sequence_flags_xdata[] = {
 XLAT(DRM_CRTC_SEQUENCE_RELATIVE),
 XLAT(DRM_CRTC_SEQUENCE_NEXT_ON_MISS),
};
static
const struct xlat drm_crtc_sequence_flags[1] = { {
 .data = drm_crtc_sequence_flags_xdata,
 .size = ARRAY_SIZE(drm_crtc_sequence_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
