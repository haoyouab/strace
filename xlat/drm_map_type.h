/* Generated by ./xlat/gen.sh from ./xlat/drm_map_type.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(_DRM_FRAME_BUFFER) || (defined(HAVE_DECL__DRM_FRAME_BUFFER) && HAVE_DECL__DRM_FRAME_BUFFER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_FRAME_BUFFER) == (0), "_DRM_FRAME_BUFFER != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_FRAME_BUFFER 0
#endif
#if defined(_DRM_REGISTERS) || (defined(HAVE_DECL__DRM_REGISTERS) && HAVE_DECL__DRM_REGISTERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_REGISTERS) == (1), "_DRM_REGISTERS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_REGISTERS 1
#endif
#if defined(_DRM_SHM) || (defined(HAVE_DECL__DRM_SHM) && HAVE_DECL__DRM_SHM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_SHM) == (2), "_DRM_SHM != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_SHM 2
#endif
#if defined(_DRM_AGP) || (defined(HAVE_DECL__DRM_AGP) && HAVE_DECL__DRM_AGP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_AGP) == (3), "_DRM_AGP != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_AGP 3
#endif
#if defined(_DRM_SCATTER_GATHER) || (defined(HAVE_DECL__DRM_SCATTER_GATHER) && HAVE_DECL__DRM_SCATTER_GATHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_SCATTER_GATHER) == (4), "_DRM_SCATTER_GATHER != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_SCATTER_GATHER 4
#endif
#if defined(_DRM_CONSISTENT) || (defined(HAVE_DECL__DRM_CONSISTENT) && HAVE_DECL__DRM_CONSISTENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((_DRM_CONSISTENT) == (5), "_DRM_CONSISTENT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define _DRM_CONSISTENT 5
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat drm_map_type[];

# else

static const struct xlat_data drm_map_type_xdata[] = {
 XLAT(_DRM_FRAME_BUFFER),
 XLAT(_DRM_REGISTERS),
 XLAT(_DRM_SHM),
 XLAT(_DRM_AGP),
 XLAT(_DRM_SCATTER_GATHER),
 XLAT(_DRM_CONSISTENT),
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat drm_map_type[1] = { {
 .data = drm_map_type_xdata,
 .size = ARRAY_SIZE(drm_map_type_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
