/* Generated by ./xlat/gen.sh from ./xlat/drm_syncobj_wait_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL) || (defined(HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL) && HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL) == ((1 << 0)), "DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL (1 << 0)
#endif
#if defined(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT) || (defined(HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT) && HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT) == ((1 << 1)), "DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT (1 << 1)
#endif
#if defined(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE) || (defined(HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE) && HAVE_DECL_DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE) == ((1 << 2)), "DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE != (1 << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE (1 << 2)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat drm_syncobj_wait_flags in mpers mode

# else

static const struct xlat_data drm_syncobj_wait_flags_xdata[] = {
 XLAT(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL),
 XLAT(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT),
 XLAT(DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE),
};
static
const struct xlat drm_syncobj_wait_flags[1] = { {
 .data = drm_syncobj_wait_flags_xdata,
 .size = ARRAY_SIZE(drm_syncobj_wait_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
